/*
 * lcd_ls020.c
 *
 *  Created on: 08/02/2012
 *      Author: Limpinho
 */

#include "lcd.h"

void S65_CS_DISABLE()
{
	pinWrite(CS,1);
}

void S65_CS_ENABLE()
{
	pinWrite(CS,0);
}

void S65_RS_DISABLE()
{
	pinWrite(RS,1);
}

void S65_RS_ENABLE()
{
	pinWrite(RS,0);
}

void S65_RST_DISABLE()
{
	pinWrite(RESET,1);
}

void S65_RST_ENABLE()
{
	pinWrite(RESET,0);
}

void S65_CLK_LOW()
{
	pinWrite(CLK,0);
}

void S65_CLK_HIGH()
{
	pinWrite(CLK,1);
}

void S65_DAT_LOW()
{
	pinWrite(DATA,0);
}

void S65_DAT_HIGH()
{
	pinWrite(DATA,1);
}


void delay(uint16_t ms)
 {
 	BCSCTL1= CALBC1_16MHZ;		//Set up the processor to run at a calibrated 16MHz rate.
 	DCOCTL= CALDCO_16MHZ;

 	//d*=512;
 	uint16_t time = ms;

     while (time--)
     {
         __delay_cycles(16000);//30
     }
 }


void s65_drawStart(void)
{
	 s65_writeCmd(0x5C);
	  S65_RS_ENABLE(); //data
	  S65_CS_ENABLE();


  return;
}




void s65_draw(uint16_t color)
{
	s65_writeSPI(color>>8);
	  s65_writeSPI(color);


  return;
}




void s65_drawStop(void)
{
	S65_CS_DISABLE();


  return;
}




void s65_setArea(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
	s65_writeCmd(0x15);                    //column address set
	  s65_writeData(0x08+y0);                //start column
	  s65_writeData(0x01);                   //start column
	  s65_writeData(0x08+y1);                //end column
	  s65_writeData(0x01);                   //end column
	  s65_writeCmd(0x75);                    //page address set
	  s65_writeData(x0);                     //start page
	  s65_writeData(x1);                     //end page


  return;
}




void s65_setCursor(uint8_t x, uint8_t y)
{
	s65_setArea(x, y, x, y);

  return;
}



void s65_init(void)
{
  //reset
	PORT_DIR |= (RS | DATA | CLK | CS | RESET);
	s65_writeCmd(0xAE); //display off



	  s65_writeData(0x2B); //565 mode, 0x2A=normal, 0x2B=180


	  s65_writeCmd(0xCA);  //display control
	  s65_writeData(0x4C); //P1
	  s65_writeData(0x01); //P2
	  s65_writeData(0x53); //P3
	  s65_writeData(0x00); //P4
	  s65_writeData(0x02); //P5
	  s65_writeData(0xB4); //P6
	  s65_writeData(0xB0); //P7
	  s65_writeData(0x02); //P8
	  s65_writeData(0x00); //P9


	  s65_writeCmd(0x94); //sleep out


	  delay(5);


	  s65_writeCmd(0xAF); //display on


	  delay(5);


	  s65_setArea(0, 0, (S65_WIDTH-1), (S65_HEIGHT-1));

  return;
}




void s65_writeData(uint16_t data)
{
	S65_RS_DISABLE(); //data
	  S65_CS_ENABLE();
	  s65_writeSPI(data);
	  s65_writeSPI(0x00);
	  S65_CS_DISABLE();


  return;
}




void s65_writeCmd(uint8_t cmd)
{
  S65_RS_ENABLE(); //cmd
  S65_CS_ENABLE();
  s65_writeSPI(cmd);
  s65_writeSPI(0x00);
  S65_CS_DISABLE();


  return;
}



void s65_writeSPI(uint8_t data)
{
  uint8_t mask;

  for(mask=0x80; mask!=0; mask>>=1)
  {
    S65_CLK_LOW();
    if(mask & data)
    {
      S65_DAT_HIGH();
    }
    else
    {
      S65_DAT_LOW();
    }
    S65_CLK_HIGH();
  }
  S65_CLK_LOW();

  return;
}

void pinWrite(uint8_t bit, uint8_t val)
  {
    if (val){
      PORT_OUT |= bit;
    } else {
      PORT_OUT &= ~bit;
    }
  }






